<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Champion Blog</title>
    <description>关于前端与设计、黑客与画家 | 张平，Web &amp; Mobile Lover，Software Engineer，UX Designer | 这里是 @Champion张平 的个人博客，与你一起发现更大的世界。</description>
    <link>https://dora1031.com/</link>
    <atom:link href="https://dora1031.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 22 Nov 2018 11:11:47 +0800</pubDate>
    <lastBuildDate>Thu, 22 Nov 2018 11:11:47 +0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>面试题目总结</title>
        <description>&lt;h3 id=&quot;1-一致性协议zab&quot;&gt;1 一致性协议ZAB&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/fb527a64deee&quot;&gt;ZAB原理说明&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-访问网站全过程分析&quot;&gt;2 访问网站全过程分析&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/yonggeit/article/details/72857630&quot;&gt;访问网站分析&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 28 Sep 2018 00:00:00 +0800</pubDate>
        <link>https://dora1031.com/true/2018/09/28/interview/</link>
        <guid isPermaLink="true">https://dora1031.com/true/2018/09/28/interview/</guid>
        
        <category>interview</category>
        
        
        <category>true</category>
        
      </item>
    
      <item>
        <title>源码阅读习惯</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;       作为一名软件开发人员，我们平时除了编码的工作，还有一个也是免不了的，那就是源码的阅读，这个也分为2个方面，一个是刚进入到某个项目中对已有代码的阅读，还有一个是针对一些开源的优秀框架的源码阅读，比如netty、spring、rocketmq，此处列举的主要是java方面的，其它编程语言的优秀框架也不少，可以在github上面搜索星级比较多的;业界流传较广的;最简单最直接的方式可以直接通过查看用人单位上面针对技术岗位的要求。这个是目的导向的，还有一个就是根据自己的兴趣爱好选择性的去阅读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;       个人的成长跟你的工作经历不一定是成正比的关系的，不是工作时间越长，个人能力就越突出,它跟你从事的工作性质、工作内容、项目复杂度、技术新旧程度都有一定的关系，往往我们从失败、教训、错误中学到的东西才更加宝贵。外科医生经历复杂的手术才能不断成长，对于开发人员我们也是手拿手术刀,不过我们操刀的对象不是人，而是项目。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;       感觉有点扯远了，回到正题，针对源码的阅读，说实在话我也挺困惑的，怎样阅读源码才是最好的方式呢？曾几何时，我也想问过一些技术大牛，哪种方式最适合我们阅读源码啊，不同的人给的意见也不统一，也曾到网上google了一番，也曾兴致勃勃把不少重量级别的开源项目clone到本地，但是很难坚持看完。为此我总结了如下几点：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;首先要培养自己阅读源码的兴趣&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;明确它的重要性，探索未知世界，明白他人写代码是的思路。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;如何阅读&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;       首先明白它是用来干什么的？浏览一下它的功能，熟悉一下包的结构。没有看之前，想象一下如果是你的话，你会怎么来设计它。总结一下它里面的依赖，用到了哪些东西，比如zk 、redis引用进来的目的是什么？首先从demo看起，可以试着调试代码，追踪一下执行的过程，对于自己有困惑的可以试着coding来验证你的猜想。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 28 Sep 2018 00:00:00 +0800</pubDate>
        <link>https://dora1031.com/true/2018/09/28/code/</link>
        <guid isPermaLink="true">https://dora1031.com/true/2018/09/28/code/</guid>
        
        <category>源码</category>
        
        
        <category>true</category>
        
      </item>
    
      <item>
        <title>work skill</title>
        <description>&lt;h3 id=&quot;1-本地项目如上传至github&quot;&gt;1. 本地项目如上传至github&lt;/h3&gt;
&lt;p&gt;(1)本地新建目录，然后执行git init&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git add .&lt;/li&gt;
  &lt;li&gt;git commit -m “msg”&lt;/li&gt;
  &lt;li&gt;git remote add origin git@github.com:champion1Ping/dora.git&lt;/li&gt;
  &lt;li&gt;git push -u origin master&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果权限没有，需要设置key。（针对ssh)&lt;/p&gt;

&lt;h3 id=&quot;2-dubbo-invoke命令&quot;&gt;2. dubbo invoke命令&lt;/h3&gt;
&lt;p&gt;版本2.5.6为分界线，如果入参是一个对象，需要添加类class&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;invoke io.terminus.solution.ipm.api.facade.shop.WarehouseRuleReadFacade.findWarehouseRuleById({“class”:”io.terminus.solution.ipm.api.bean.request.warehouse.rule.WarehouseRuleFindByIdRequest”,”id”:1})&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-代码结构&quot;&gt;3. 代码结构&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;领域对外接口实现&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;converter：接口入参、出参转换&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;facade：接口业务实现（三步走：接口入参、委托Service处理业务逻辑、接口出参转换）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;aop：接口横切公共逻辑（接口入参校验、日志处理（记录、MQ等）、异常转换，优雅停机，并发访问分布式锁等）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;领域业务逻辑实现&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;依赖repository完成聚合根实体持久化&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;依赖adaptor完成外部接口访问&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;adaptor：外部接口访问层（ACL）&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;依赖的外部接口（Dubbo、HTTP、MQ等）统一在此目录下定义、转换、适配、熔断、日志&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;业务逻辑处理层（server）依赖天完成外部接口调用，使其避免受到外部接口变动影响&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;-去掉了service层的接口，同时写服务都继承读服务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-占位符的处理&quot;&gt;4. 占位符的处理&lt;/h3&gt;
&lt;p&gt;applicationContext
.getEnvironment().resolvePlaceholders(job.cron())&lt;/p&gt;

&lt;h3 id=&quot;5-maven-命令行之行mvn-clean莫名其妙的问题&quot;&gt;5. maven 命令行之行mvn clean莫名其妙的问题&lt;/h3&gt;
&lt;p&gt;mvn -v 查看本地的安装，然后修改对应的setting.xml改为公司的地址即可&lt;/p&gt;

&lt;h3 id=&quot;6-java利器&quot;&gt;6. java利器&lt;/h3&gt;
&lt;p&gt;https://mp.weixin.qq.com/s/KFuYd38esMFvR7M7Df8WoA&lt;/p&gt;

&lt;h3 id=&quot;7-blog提交之前的操作&quot;&gt;7. blog提交之前的操作&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;jekyll server 本地可以查看效果&lt;/li&gt;
  &lt;li&gt;jekyll build 构建_site&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8mybatis-prefixoverrides-suffixoverrides&quot;&gt;8.mybatis prefixOverrides suffixOverrides&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;prefixOverrides:指定去除多余的前缀内容&lt;/li&gt;
  &lt;li&gt;suffixOverrides:注定去处多余的后缀内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;9需改远程仓库的地址&quot;&gt;9.需改远程仓库的地址&lt;/h3&gt;
&lt;p&gt;git remote set-url origin http://git.terminus.io/retail-mall/inventory/parana-inventory.git&lt;/p&gt;

</description>
        <pubDate>Thu, 27 Sep 2018 00:00:00 +0800</pubDate>
        <link>https://dora1031.com/true/2018/09/27/test/</link>
        <guid isPermaLink="true">https://dora1031.com/true/2018/09/27/test/</guid>
        
        <category>工作</category>
        
        
        <category>true</category>
        
      </item>
    
  </channel>
</rss>
